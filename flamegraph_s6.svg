<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Chart</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>std::sys::fd::unix::FileDesc::write (38,850,423 samples, 0.08%)</title><rect x="309.6" y="133" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="312.56" y="143.5" ></text>
</g>
<g >
<title>[unknown] (4,825,031 samples, 0.01%)</title><rect x="307.9" y="53" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.90" y="63.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (77,687,648 samples, 0.16%)</title><rect x="300.2" y="245" width="1.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="303.16" y="255.5" ></text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (26,348,176,067 samples, 54.67%)</title><rect x="340.6" y="245" width="645.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="343.60" y="255.5" >core::ptr::copy_nonoverlapping</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (9,931,853 samples, 0.02%)</title><rect x="310.6" y="213" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="313.63" y="223.5" ></text>
</g>
<g >
<title>core::num::&lt;impl i32&gt;::wrapping_add (102,412,361 samples, 0.21%)</title><rect x="985.7" y="229" width="2.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="988.71" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (339,965,820 samples, 0.71%)</title><rect x="302.3" y="229" width="8.3" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="305.30" y="239.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (697,167,077 samples, 1.45%)</title><rect x="1172.9" y="197" width="17.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1175.93" y="207.5" ></text>
</g>
<g >
<title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4,828,191 samples, 0.01%)</title><rect x="310.5" y="197" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="313.51" y="207.5" ></text>
</g>
<g >
<title>[unknown] (58,265,229 samples, 0.12%)</title><rect x="10.0" y="389" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (237,964,502 samples, 0.49%)</title><rect x="302.4" y="181" width="5.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="305.43" y="191.5" ></text>
</g>
<g >
<title>[unknown] (14,478,137 samples, 0.03%)</title><rect x="310.2" y="53" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="313.16" y="63.5" ></text>
</g>
<g >
<title>core::ptr::align_offset (4,950,336 samples, 0.01%)</title><rect x="309.4" y="149" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="312.44" y="159.5" ></text>
</g>
<g >
<title>[unknown] (86,856,460 samples, 0.18%)</title><rect x="305.9" y="85" width="2.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="308.89" y="95.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (697,167,077 samples, 1.45%)</title><rect x="1172.9" y="213" width="17.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1175.93" y="223.5" ></text>
</g>
<g >
<title>[unknown] (38,850,423 samples, 0.08%)</title><rect x="309.6" y="101" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.56" y="111.5" ></text>
</g>
<g >
<title>[unknown] (4,827,921 samples, 0.01%)</title><rect x="985.6" y="53" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="988.60" y="63.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (4,827,921 samples, 0.01%)</title><rect x="985.6" y="101" width="0.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="988.60" y="111.5" ></text>
</g>
<g >
<title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (4,832,430 samples, 0.01%)</title><rect x="309.2" y="165" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="312.20" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_write (228,329,004 samples, 0.47%)</title><rect x="302.4" y="133" width="5.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="305.43" y="143.5" ></text>
</g>
<g >
<title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (102,412,361 samples, 0.21%)</title><rect x="985.7" y="277" width="2.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="988.71" y="287.5" ></text>
</g>
<g >
<title>[unknown] (4,791,000 samples, 0.01%)</title><rect x="985.5" y="197" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="988.48" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (23,961,899,973 samples, 49.72%)</title><rect x="398.9" y="229" width="586.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="401.91" y="239.5" >__memmove_avx512_unaligned_erms</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (9,931,853 samples, 0.02%)</title><rect x="310.6" y="245" width="0.3" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="313.63" y="255.5" ></text>
</g>
<g >
<title>[unknown] (34,042,685 samples, 0.07%)</title><rect x="309.7" y="85" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.68" y="95.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (4,827,921 samples, 0.01%)</title><rect x="985.6" y="149" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="988.60" y="159.5" ></text>
</g>
<g >
<title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (38,850,423 samples, 0.08%)</title><rect x="309.6" y="149" width="0.9" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="312.56" y="159.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (258,227,066 samples, 0.54%)</title><rect x="293.8" y="213" width="6.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="296.84" y="223.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (48,135,929,200 samples, 99.88%)</title><rect x="11.4" y="309" width="1178.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="14.43" y="319.5" >core::ops::function::FnOnce::call_once</text>
</g>
<g >
<title>s6::AsciiCounter::view_ascii (697,167,077 samples, 1.45%)</title><rect x="1172.9" y="277" width="17.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1175.93" y="287.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (4,827,921 samples, 0.01%)</title><rect x="985.6" y="133" width="0.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="988.60" y="143.5" ></text>
</g>
<g >
<title>[unknown] (140,193,554 samples, 0.29%)</title><rect x="304.6" y="101" width="3.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="307.58" y="111.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (27,528,588,339 samples, 57.12%)</title><rect x="311.7" y="261" width="674.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="314.70" y="271.5" >std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked</text>
</g>
<g >
<title>[unknown] (29,064,411 samples, 0.06%)</title><rect x="309.8" y="69" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="312.80" y="79.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (624,945,493 samples, 1.30%)</title><rect x="1157.6" y="245" width="15.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1160.63" y="255.5" ></text>
</g>
<g >
<title>core::slice::memchr::memrchr (29,326,970 samples, 0.06%)</title><rect x="308.8" y="181" width="0.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="311.84" y="191.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (258,227,066 samples, 0.54%)</title><rect x="293.8" y="229" width="6.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="296.84" y="239.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (4,827,921 samples, 0.01%)</title><rect x="985.6" y="229" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="988.60" y="239.5" ></text>
</g>
<g >
<title>[unknown] (14,623,193 samples, 0.03%)</title><rect x="307.7" y="69" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.66" y="79.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (4,827,921 samples, 0.01%)</title><rect x="985.6" y="165" width="0.1" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="988.60" y="175.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (9,635,496 samples, 0.02%)</title><rect x="308.0" y="133" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="311.02" y="143.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (33,705,453 samples, 0.07%)</title><rect x="310.9" y="245" width="0.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="313.87" y="255.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::capacity (9,931,853 samples, 0.02%)</title><rect x="310.6" y="229" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="313.63" y="239.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buf (4,827,921 samples, 0.01%)</title><rect x="985.6" y="117" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="988.60" y="127.5" ></text>
</g>
<g >
<title>[unknown] (4,791,000 samples, 0.01%)</title><rect x="985.5" y="181" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="988.48" y="191.5" ></text>
</g>
<g >
<title>std::sys::fd::unix::FileDesc::write (9,635,496 samples, 0.02%)</title><rect x="308.0" y="85" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="311.02" y="95.5" ></text>
</g>
<g >
<title>std::sys::fd::unix::FileDesc::write (237,964,502 samples, 0.49%)</title><rect x="302.4" y="149" width="5.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="305.43" y="159.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (335,136,373 samples, 0.70%)</title><rect x="302.3" y="213" width="8.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="305.30" y="223.5" ></text>
</g>
<g >
<title>all (48,194,232,986 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (959,012,915 samples, 1.99%)</title><rect x="278.6" y="261" width="23.5" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="281.58" y="271.5" >s..</text>
</g>
<g >
<title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (9,635,496 samples, 0.02%)</title><rect x="308.0" y="101" width="0.3" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="311.02" y="111.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::align_to (9,890,062 samples, 0.02%)</title><rect x="309.3" y="165" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="312.32" y="175.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (9,635,496 samples, 0.02%)</title><rect x="308.0" y="117" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="311.02" y="127.5" ></text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (4,827,921 samples, 0.01%)</title><rect x="985.6" y="197" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="988.60" y="207.5" ></text>
</g>
<g >
<title>core::cell::BorrowRefMut::new (4,828,191 samples, 0.01%)</title><rect x="310.5" y="181" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="313.51" y="191.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (335,136,373 samples, 0.70%)</title><rect x="302.3" y="197" width="8.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="305.30" y="207.5" ></text>
</g>
<g >
<title>core::cell::RefCell&lt;T&gt;::borrow_mut (4,828,191 samples, 0.01%)</title><rect x="310.5" y="213" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="313.51" y="223.5" ></text>
</g>
<g >
<title>[unknown] (228,329,004 samples, 0.47%)</title><rect x="302.4" y="117" width="5.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="305.43" y="127.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (393,543,279 samples, 0.82%)</title><rect x="302.1" y="261" width="9.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="305.06" y="271.5" ></text>
</g>
<g >
<title>core::slice::index::get_offset_len_noubcheck (653,208,158 samples, 1.36%)</title><rect x="1174.0" y="181" width="16.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1177.01" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::set_len (640,783,697 samples, 1.33%)</title><rect x="324.9" y="245" width="15.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="327.91" y="255.5" ></text>
</g>
<g >
<title>core::cmp::min (624,945,493 samples, 1.30%)</title><rect x="1157.6" y="261" width="15.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1160.63" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_write (38,850,423 samples, 0.08%)</title><rect x="309.6" y="117" width="0.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="312.56" y="127.5" ></text>
</g>
<g >
<title>[unknown] (9,635,496 samples, 0.02%)</title><rect x="308.0" y="53" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.02" y="63.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (4,827,921 samples, 0.01%)</title><rect x="985.6" y="213" width="0.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="988.60" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_write (24,060,799 samples, 0.05%)</title><rect x="308.3" y="181" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="311.25" y="191.5" ></text>
</g>
<g >
<title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (237,964,502 samples, 0.49%)</title><rect x="302.4" y="165" width="5.9" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="305.43" y="175.5" ></text>
</g>
<g >
<title>__libc_start_call_main (48,135,929,200 samples, 99.88%)</title><rect x="11.4" y="357" width="1178.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.43" y="367.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::sys::backtrace::__rust_begin_short_backtrace (48,135,929,200 samples, 99.88%)</title><rect x="11.4" y="325" width="1178.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="14.43" y="335.5" >std::sys::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>__GI___libc_write (4,827,921 samples, 0.01%)</title><rect x="985.6" y="69" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="988.60" y="79.5" ></text>
</g>
<g >
<title>s6 (48,194,232,986 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >s6</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (38,850,423 samples, 0.08%)</title><rect x="309.6" y="181" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="312.56" y="191.5" ></text>
</g>
<g >
<title>&lt;i32 as core::iter::range::Step&gt;::forward_checked (102,412,361 samples, 0.21%)</title><rect x="985.7" y="245" width="2.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="988.71" y="255.5" ></text>
</g>
<g >
<title>core::array::_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$::index::h0b7c414ea772ff3a (697,167,077 samples, 1.45%)</title><rect x="1172.9" y="261" width="17.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1175.93" y="271.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (38,850,423 samples, 0.08%)</title><rect x="309.6" y="165" width="0.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="312.56" y="175.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (697,167,077 samples, 1.45%)</title><rect x="1172.9" y="245" width="17.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1175.93" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9,931,853 samples, 0.02%)</title><rect x="310.6" y="197" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="313.63" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (33,705,453 samples, 0.07%)</title><rect x="310.9" y="213" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="313.87" y="223.5" ></text>
</g>
<g >
<title>[unknown] (4,791,000 samples, 0.01%)</title><rect x="985.5" y="213" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="988.48" y="223.5" ></text>
</g>
<g >
<title>s6::AsciiCounter::bump (7,543,949,048 samples, 15.65%)</title><rect x="988.2" y="277" width="184.7" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="991.22" y="287.5" >s6::AsciiCounter::bump</text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (697,167,077 samples, 1.45%)</title><rect x="1172.9" y="229" width="17.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1175.93" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (29,511,261,269 samples, 61.23%)</title><rect x="263.2" y="277" width="722.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="266.15" y="287.5" >&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all</text>
</g>
<g >
<title>s6::main (48,135,929,200 samples, 99.88%)</title><rect x="11.4" y="293" width="1178.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="14.43" y="303.5" >s6::main</text>
</g>
<g >
<title>[unknown] (4,825,031 samples, 0.01%)</title><rect x="307.9" y="37" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="310.90" y="47.5" ></text>
</g>
<g >
<title>[unknown] (24,060,799 samples, 0.05%)</title><rect x="308.3" y="165" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="311.25" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::capacity (258,227,066 samples, 0.54%)</title><rect x="293.8" y="245" width="6.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="296.84" y="255.5" ></text>
</g>
<g >
<title>main (48,135,929,200 samples, 99.88%)</title><rect x="11.4" y="341" width="1178.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="14.43" y="351.5" >main</text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (48,135,929,200 samples, 99.88%)</title><rect x="11.4" y="373" width="1178.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="14.43" y="383.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (33,705,453 samples, 0.07%)</title><rect x="310.9" y="229" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="313.87" y="239.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (339,965,820 samples, 0.71%)</title><rect x="302.3" y="245" width="8.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="305.30" y="255.5" ></text>
</g>
<g >
<title>_start (48,135,967,757 samples, 99.88%)</title><rect x="11.4" y="389" width="1178.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.43" y="399.5" >_start</text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (4,827,921 samples, 0.01%)</title><rect x="985.6" y="85" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="988.60" y="95.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4,827,921 samples, 0.01%)</title><rect x="985.6" y="181" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="988.60" y="191.5" ></text>
</g>
<g >
<title>[unknown] (4,791,000 samples, 0.01%)</title><rect x="985.5" y="165" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="988.48" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_write (9,635,496 samples, 0.02%)</title><rect x="308.0" y="69" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="311.02" y="79.5" ></text>
</g>
<g >
<title>&lt;i32 as core::iter::range::Step&gt;::forward (102,412,361 samples, 0.21%)</title><rect x="985.7" y="261" width="2.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="988.71" y="271.5" ></text>
</g>
</g>
</svg>
