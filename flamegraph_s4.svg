<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="726.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Chart</text>
<text id="details" x="10.00" y="709" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="709" > </text>
<g id="frames">
<g >
<title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,679,246,241 samples, 4.30%)</title><rect x="342.8" y="245" width="50.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="345.78" y="255.5" >alloc..</text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (237,660,765 samples, 0.61%)</title><rect x="988.0" y="245" width="7.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="990.97" y="255.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,156,404 samples, 0.01%)</title><rect x="688.4" y="181" width="0.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="691.42" y="191.5" ></text>
</g>
<g >
<title>core::num::&lt;impl i32&gt;::wrapping_abs (212,373,472 samples, 0.54%)</title><rect x="1181.9" y="277" width="6.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1184.86" y="287.5" ></text>
</g>
<g >
<title>core::fmt::write (37,142,941,450 samples, 95.07%)</title><rect x="68.2" y="341" width="1121.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="71.19" y="351.5" >core::fmt::write</text>
</g>
<g >
<title>[unknown] (10,366,550 samples, 0.03%)</title><rect x="687.9" y="101" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="690.95" y="111.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (15,504,687 samples, 0.04%)</title><rect x="394.0" y="277" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="396.97" y="287.5" ></text>
</g>
<g >
<title>all (39,069,653,870 samples, 100%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>std::sys::fd::unix::FileDesc::write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="149" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="690.17" y="159.5" ></text>
</g>
<g >
<title>std::panicking::catch_unwind (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="549" width="1178.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="14.05" y="559.5" >std::panicking::catch_unwind</text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (5,815,670,001 samples, 14.89%)</title><rect x="445.3" y="261" width="175.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="448.33" y="271.5" >__memmove_avx512_unali..</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (10,330,529 samples, 0.03%)</title><rect x="394.0" y="213" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="396.97" y="223.5" ></text>
</g>
<g >
<title>[unknown] (36,244,517 samples, 0.09%)</title><rect x="687.2" y="117" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="690.17" y="127.5" ></text>
</g>
<g >
<title>[unknown] (10,330,529 samples, 0.03%)</title><rect x="394.0" y="133" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="396.97" y="143.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (5,169,914 samples, 0.01%)</title><rect x="987.8" y="85" width="0.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="990.82" y="95.5" ></text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (9,907,902,863 samples, 25.36%)</title><rect x="688.7" y="245" width="299.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="691.73" y="255.5" >core::ptr::copy_nonoverlapping</text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (5,181,706 samples, 0.01%)</title><rect x="688.6" y="213" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="691.57" y="223.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (1,694,759,740 samples, 4.34%)</title><rect x="342.8" y="293" width="51.2" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="345.78" y="303.5" >std::..</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="181" width="1.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="690.17" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (15,513,499 samples, 0.04%)</title><rect x="393.5" y="277" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="396.50" y="287.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h6d957065fdbdbfbb (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="437" width="1178.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.05" y="447.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h6d957065fdbdbfbb</text>
</g>
<g >
<title>std::io::Write::write_fmt (38,296,314,163 samples, 98.02%)</title><rect x="33.4" y="373" width="1156.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="36.35" y="383.5" >std::io::Write::write_fmt</text>
</g>
<g >
<title>core::num::&lt;impl i32&gt;::unsigned_abs (212,373,472 samples, 0.54%)</title><rect x="1181.9" y="293" width="6.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1184.86" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_write (9,076,557 samples, 0.02%)</title><rect x="10.8" y="629" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.78" y="639.5" ></text>
</g>
<g >
<title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (13,918,040,594 samples, 35.62%)</title><rect x="200.6" y="325" width="420.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="203.62" y="335.5" >&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Wri..</text>
</g>
<g >
<title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="197" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="690.17" y="207.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1,679,246,241 samples, 4.30%)</title><rect x="342.8" y="261" width="50.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="345.78" y="271.5" >alloc..</text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (5,181,706 samples, 0.01%)</title><rect x="688.6" y="229" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="691.57" y="239.5" ></text>
</g>
<g >
<title>core::slice::memchr::memrchr (5,164,657 samples, 0.01%)</title><rect x="394.3" y="213" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="397.28" y="223.5" ></text>
</g>
<g >
<title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (243,132,469 samples, 0.62%)</title><rect x="193.3" y="293" width="7.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="196.28" y="303.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::new (5,156,122 samples, 0.01%)</title><rect x="688.3" y="229" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="691.26" y="239.5" ></text>
</g>
<g >
<title>core::fmt::rt::&lt;impl core::fmt::Arguments&gt;::new_v1 (36,283,214 samples, 0.09%)</title><rect x="32.3" y="373" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="35.26" y="383.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (5,169,914 samples, 0.01%)</title><rect x="987.8" y="213" width="0.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="990.82" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,156,404 samples, 0.01%)</title><rect x="688.4" y="213" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="691.42" y="223.5" ></text>
</g>
<g >
<title>std::sys::backtrace::__rust_begin_short_backtrace (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="421" width="1178.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="14.05" y="431.5" >std::sys::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,156,404 samples, 0.01%)</title><rect x="688.4" y="197" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="691.42" y="207.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="453" width="1178.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="14.05" y="463.5" >core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text>
</g>
<g >
<title>[unknown] (9,076,557 samples, 0.02%)</title><rect x="10.8" y="613" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.78" y="623.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (5,156,404 samples, 0.01%)</title><rect x="688.4" y="229" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="691.42" y="239.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (5,181,706 samples, 0.01%)</title><rect x="688.6" y="245" width="0.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="691.57" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (15,504,687 samples, 0.04%)</title><rect x="394.0" y="229" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="396.97" y="239.5" ></text>
</g>
<g >
<title>[unknown] (5,167,924 samples, 0.01%)</title><rect x="54.8" y="357" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="57.76" y="367.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="405" width="1178.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="14.05" y="415.5" >core::ops::function::FnOnce::call_once</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (7,500,905,456 samples, 19.20%)</title><rect x="394.4" y="293" width="226.6" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="397.44" y="303.5" >std::io::buffered::bufwriter:..</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (51,802,236 samples, 0.13%)</title><rect x="685.6" y="261" width="1.6" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="688.60" y="271.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get_unchecked (227,465,156 samples, 0.58%)</title><rect x="1175.0" y="277" width="6.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1177.99" y="287.5" ></text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (5,981,124,560 samples, 15.31%)</title><rect x="440.3" y="277" width="180.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="443.34" y="287.5" >core::ptr::copy_nonover..</text>
</g>
<g >
<title>std::io::default_write_fmt (37,582,359,412 samples, 96.19%)</title><rect x="54.9" y="357" width="1135.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="57.92" y="367.5" >std::io::default_write_fmt</text>
</g>
<g >
<title>[unknown] (9,076,557 samples, 0.02%)</title><rect x="10.8" y="645" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.78" y="655.5" ></text>
</g>
<g >
<title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (248,279,281 samples, 0.64%)</title><rect x="193.1" y="309" width="7.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="196.12" y="319.5" ></text>
</g>
<g >
<title>std::panicking::catch_unwind (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="485" width="1178.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="14.05" y="495.5" >std::panicking::catch_unwind</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (5,169,914 samples, 0.01%)</title><rect x="987.8" y="181" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="990.82" y="191.5" ></text>
</g>
<g >
<title>s4::main (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="389" width="1178.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="14.05" y="399.5" >s4::main</text>
</g>
<g >
<title>core::fmt::num::imp::&lt;impl u32&gt;::_fmt (2,187,454,483 samples, 5.60%)</title><rect x="1115.8" y="293" width="66.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1118.80" y="303.5" >core::f..</text>
</g>
<g >
<title>std::rt::lang_start_internal (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="581" width="1178.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="14.05" y="591.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>__GI___libc_write (25,817,174 samples, 0.07%)</title><rect x="10.0" y="629" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::new (282,143,322 samples, 0.72%)</title><rect x="621.0" y="325" width="8.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="623.98" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_write (5,169,914 samples, 0.01%)</title><rect x="987.8" y="53" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="990.82" y="63.5" ></text>
</g>
<g >
<title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (18,361,285,332 samples, 47.00%)</title><rect x="633.7" y="309" width="554.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="636.72" y="319.5" >core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (5,169,914 samples, 0.01%)</title><rect x="987.8" y="149" width="0.2" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="990.82" y="159.5" ></text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (5,169,914 samples, 0.01%)</title><rect x="987.8" y="197" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="990.82" y="207.5" ></text>
</g>
<g >
<title>[unknown] (10,330,529 samples, 0.03%)</title><rect x="394.0" y="149" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="396.97" y="159.5" ></text>
</g>
<g >
<title>[unknown] (5,156,298 samples, 0.01%)</title><rect x="1174.8" y="245" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1177.84" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (11,236,726,150 samples, 28.76%)</title><rect x="655.8" y="293" width="339.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="658.77" y="303.5" >&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as co..</text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="229" width="1.1" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="690.17" y="239.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1,023,896,297 samples, 2.62%)</title><rect x="1144.1" y="277" width="30.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1147.07" y="287.5" >co..</text>
</g>
<g >
<title>core::fmt::Formatter::pad_integral::write_prefix (1,696,220,662 samples, 4.34%)</title><rect x="1064.6" y="277" width="51.2" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1067.57" y="287.5" >core:..</text>
</g>
<g >
<title>[unknown] (5,169,914 samples, 0.01%)</title><rect x="987.8" y="37" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="990.82" y="47.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (5,169,914 samples, 0.01%)</title><rect x="987.8" y="133" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="990.82" y="143.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (10,145,563,628 samples, 25.97%)</title><rect x="688.7" y="261" width="306.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="691.73" y="271.5" >std::io::buffered::bufwriter::BufWriter&lt;W..</text>
</g>
<g >
<title>std::panic::catch_unwind (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="501" width="1178.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="14.05" y="511.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>__memmove_avx512_unaligned_erms (9,856,044,446 samples, 25.23%)</title><rect x="690.1" y="229" width="297.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="693.14" y="239.5" >__memmove_avx512_unaligned_erms</text>
</g>
<g >
<title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (10,330,529 samples, 0.03%)</title><rect x="394.0" y="197" width="0.3" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="396.97" y="207.5" ></text>
</g>
<g >
<title>std::sys::fd::unix::FileDesc::write (10,330,529 samples, 0.03%)</title><rect x="394.0" y="181" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="396.97" y="191.5" ></text>
</g>
<g >
<title>[[stack]] (25,817,174 samples, 0.07%)</title><rect x="10.0" y="645" width="0.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>core::slice::index::get_offset_len_noubcheck (227,465,156 samples, 0.58%)</title><rect x="1175.0" y="229" width="6.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1177.99" y="239.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (10,290,629,531 samples, 26.34%)</title><rect x="684.3" y="277" width="310.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="687.35" y="287.5" >&lt;std::io::buffered::bufwriter::BufWriter&lt;..</text>
</g>
<g >
<title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="165" width="1.1" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="690.17" y="175.5" ></text>
</g>
<g >
<title>[unknown] (5,167,924 samples, 0.01%)</title><rect x="54.8" y="341" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="57.76" y="351.5" ></text>
</g>
<g >
<title>s4 (39,069,653,870 samples, 100.00%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >s4</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buf (5,169,914 samples, 0.01%)</title><rect x="987.8" y="101" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="990.82" y="111.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (15,504,687 samples, 0.04%)</title><rect x="394.0" y="293" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="396.97" y="303.5" ></text>
</g>
<g >
<title>std::panicking::catch_unwind::do_call (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="469" width="1178.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="14.05" y="479.5" >std::panicking::catch_unwind::do_call</text>
</g>
<g >
<title>_start (39,034,760,139 samples, 99.91%)</title><rect x="11.1" y="645" width="1178.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.05" y="655.5" >_start</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard&gt; (5,169,914 samples, 0.01%)</title><rect x="987.8" y="165" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="990.82" y="175.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (51,738,749 samples, 0.13%)</title><rect x="687.2" y="261" width="1.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="690.17" y="271.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (248,279,281 samples, 0.64%)</title><rect x="193.1" y="325" width="7.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="196.12" y="335.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::haf71a34e0fbc4d76 (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="517" width="1178.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="14.05" y="527.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::haf71a34e0fbc4d76</text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="629" width="1178.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="14.05" y="639.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>__GI___libc_write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="133" width="1.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="690.17" y="143.5" ></text>
</g>
<g >
<title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (56,874,301 samples, 0.15%)</title><rect x="1188.3" y="309" width="1.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.28" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::capacity (1,679,246,241 samples, 4.30%)</title><rect x="342.8" y="277" width="50.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="345.78" y="287.5" >alloc..</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (46,557,043 samples, 0.12%)</title><rect x="687.2" y="245" width="1.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="690.17" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (15,504,687 samples, 0.04%)</title><rect x="394.0" y="245" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="396.97" y="255.5" ></text>
</g>
<g >
<title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (15,504,687 samples, 0.04%)</title><rect x="394.0" y="261" width="0.4" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="396.97" y="271.5" ></text>
</g>
<g >
<title>[unknown] (5,156,298 samples, 0.01%)</title><rect x="1174.8" y="261" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1177.84" y="271.5" ></text>
</g>
<g >
<title>main (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="597" width="1178.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="14.05" y="607.5" >main</text>
</g>
<g >
<title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (36,244,517 samples, 0.09%)</title><rect x="687.2" y="213" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="690.17" y="223.5" ></text>
</g>
<g >
<title>core::fmt::rt::Argument::fmt (18,500,944,949 samples, 47.35%)</title><rect x="629.5" y="325" width="558.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="632.50" y="335.5" >core::fmt::rt::Argument::fmt</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (227,465,156 samples, 0.58%)</title><rect x="1175.0" y="245" width="6.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1177.99" y="255.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (227,465,156 samples, 0.58%)</title><rect x="1175.0" y="261" width="6.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1177.99" y="271.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="565" width="1178.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="14.05" y="575.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (5,169,914 samples, 0.01%)</title><rect x="987.8" y="229" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="990.82" y="239.5" ></text>
</g>
<g >
<title>core::fmt::rt::&lt;impl core::fmt::Arguments&gt;::new_const (25,956,219 samples, 0.07%)</title><rect x="31.5" y="373" width="0.8" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="34.47" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_write (10,330,529 samples, 0.03%)</title><rect x="394.0" y="165" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="396.97" y="175.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::get (56,874,301 samples, 0.15%)</title><rect x="1188.3" y="325" width="1.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.28" y="335.5" ></text>
</g>
<g >
<title>core::fmt::Formatter::pad_integral (3,994,585,284 samples, 10.22%)</title><rect x="995.2" y="293" width="120.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="998.15" y="303.5" >core::fmt::Form..</text>
</g>
<g >
<title>std::panicking::catch_unwind::do_call (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="533" width="1178.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="14.05" y="543.5" >std::panicking::catch_unwind::do_call</text>
</g>
<g >
<title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (243,045,047 samples, 0.62%)</title><rect x="24.1" y="373" width="7.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="27.13" y="383.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (25,971,456 samples, 0.07%)</title><rect x="686.4" y="245" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="689.38" y="255.5" ></text>
</g>
<g >
<title>core::ptr::copy_nonoverlapping (5,169,914 samples, 0.01%)</title><rect x="987.8" y="69" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="990.82" y="79.5" ></text>
</g>
<g >
<title>[unknown] (25,817,174 samples, 0.07%)</title><rect x="10.0" y="613" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>__libc_start_call_main (39,034,615,212 samples, 99.91%)</title><rect x="11.1" y="613" width="1178.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.05" y="623.5" >__libc_start_call_main</text>
</g>
<g >
<title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (5,169,914 samples, 0.01%)</title><rect x="987.8" y="117" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="990.82" y="127.5" ></text>
</g>
<g >
<title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (9,306,966,768 samples, 23.82%)</title><rect x="339.9" y="309" width="281.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="342.89" y="319.5" >&lt;std::io::buffered::bufwriter::BufWri..</text>
</g>
</g>
</svg>
